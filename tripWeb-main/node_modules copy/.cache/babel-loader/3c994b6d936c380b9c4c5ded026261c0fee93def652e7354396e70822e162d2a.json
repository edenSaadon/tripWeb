{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\tripWeb-main\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Tooltip, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\n// Define a custom icon for the map markers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst icon = new L.Icon({\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  // URL for the marker icon\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',\n  // URL for the retina version of the marker icon\n  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',\n  // URL for the marker shadow\n  iconSize: [25, 41],\n  // Size of the marker icon\n  iconAnchor: [12, 41],\n  // Anchor point of the marker icon\n  popupAnchor: [1, -34],\n  // Anchor point for popups\n  shadowSize: [41, 41] // Size of the shadow\n});\n\n/**\n * Component to change the view of the map when the center or zoom level changes.\n */\nfunction ChangeView({\n  center,\n  zoom\n}) {\n  _s();\n  const map = useMap(); // Get the map instance from the context\n  map.setView(center, zoom); // Set the map view to the new center and zoom level\n  return null; // This component doesn't render anything itself\n}\n\n/**\n * MapComponent is responsible for rendering the map and displaying the route information as markers.\n *\n * @param {Object} props - The component props.\n * @param {Object} props.routeInfo - The route information to display on the map.\n * @param {string} props.country - The selected country for the trip.\n */\n_s(ChangeView, \"cX187cvZ2hODbkaiLn05gMk1sCM=\", false, function () {\n  return [useMap];\n});\n_c = ChangeView;\nfunction MapComponent({\n  routeInfo,\n  country\n}) {\n  _s2();\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default center of the map (London)\n  const [mapZoom, setMapZoom] = useState(5); // Default zoom level of the map\n\n  useEffect(() => {\n    /**\n     * Fetches the coordinates of the selected country and updates the map center.\n     */\n    const fetchCountryCoordinates = async () => {\n      if (!country) return;\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?country=${country}&format=json`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          setMapCenter([parseFloat(data[0].lat), parseFloat(data[0].lon)]); // Update map center with country coordinates\n          setMapZoom(5); // Adjust zoom level if necessary\n        }\n      } catch (error) {\n        console.error('Error fetching country coordinates:', error); // Log any errors in fetching data\n      }\n    };\n    fetchCountryCoordinates(); // Fetch coordinates whenever the country prop changes\n  }, [country]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: mapCenter,\n    zoom: mapZoom,\n    style: {\n      height: \"400px\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ChangeView, {\n      center: mapCenter,\n      zoom: mapZoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), routeInfo && routeInfo.routes && routeInfo.routes.map((route, idx) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [route.start.lat, route.start.lng],\n      icon: icon,\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        permanent: true,\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"Day \", idx + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }, this), route.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s2(MapComponent, \"y89EEBGUGPIUTX9l5I/Uwb2Z98w=\");\n_c2 = MapComponent;\nexport default MapComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChangeView\");\n$RefreshReg$(_c2, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Tooltip","useMap","L","jsxDEV","_jsxDEV","icon","Icon","iconUrl","iconRetinaUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","ChangeView","center","zoom","_s","map","setView","_c","MapComponent","routeInfo","country","_s2","mapCenter","setMapCenter","mapZoom","setMapZoom","fetchCountryCoordinates","response","fetch","data","json","length","parseFloat","lat","lon","error","console","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","url","attribution","routes","route","idx","position","start","lng","permanent","description","_c2","$RefreshReg$"],"sources":["C:/Users/user/Desktop/tripWeb-main/src/MapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Tooltip, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\n// Define a custom icon for the map markers\nconst icon = new L.Icon({\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png', // URL for the marker icon\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png', // URL for the retina version of the marker icon\n  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png', // URL for the marker shadow\n  iconSize: [25, 41], // Size of the marker icon\n  iconAnchor: [12, 41], // Anchor point of the marker icon\n  popupAnchor: [1, -34], // Anchor point for popups\n  shadowSize: [41, 41] // Size of the shadow\n});\n\n/**\n * Component to change the view of the map when the center or zoom level changes.\n */\nfunction ChangeView({ center, zoom }) {\n  const map = useMap(); // Get the map instance from the context\n  map.setView(center, zoom); // Set the map view to the new center and zoom level\n  return null; // This component doesn't render anything itself\n}\n\n/**\n * MapComponent is responsible for rendering the map and displaying the route information as markers.\n *\n * @param {Object} props - The component props.\n * @param {Object} props.routeInfo - The route information to display on the map.\n * @param {string} props.country - The selected country for the trip.\n */\nfunction MapComponent({ routeInfo, country }) {\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default center of the map (London)\n  const [mapZoom, setMapZoom] = useState(5); // Default zoom level of the map\n\n  useEffect(() => {\n    /**\n     * Fetches the coordinates of the selected country and updates the map center.\n     */\n    const fetchCountryCoordinates = async () => {\n      if (!country) return;\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?country=${country}&format=json`);\n        const data = await response.json();\n        if (data && data.length > 0) {\n          setMapCenter([parseFloat(data[0].lat), parseFloat(data[0].lon)]); // Update map center with country coordinates\n          setMapZoom(5);  // Adjust zoom level if necessary\n        }\n      } catch (error) {\n        console.error('Error fetching country coordinates:', error); // Log any errors in fetching data\n      }\n    };\n\n    fetchCountryCoordinates(); // Fetch coordinates whenever the country prop changes\n  }, [country]);\n\n  return (\n    <MapContainer center={mapCenter} zoom={mapZoom} style={{ height: \"400px\", width: \"100%\" }}>\n      {/* Update map view when center or zoom changes */}\n      <ChangeView center={mapCenter} zoom={mapZoom} />\n      {/* Add the OpenStreetMap tile layer */}\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      {/* Render markers for each route in the routeInfo */}\n      {routeInfo && routeInfo.routes && routeInfo.routes.map((route, idx) => (\n        <Marker key={idx} position={[route.start.lat, route.start.lng]} icon={icon}>\n          <Tooltip permanent>\n            <b>Day {idx + 1}</b><br />\n            {route.description}\n          </Tooltip>\n        </Marker>\n      ))}\n    </MapContainer>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}